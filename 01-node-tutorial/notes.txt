Free Code Camp Node.js and Express.js Full Course
    - https://www.youtube.com/watch?v=Oe421EPjeBE&t=81s&ab_channel=freeCodeCamp.org

Recommendation
    - HTML, CSS, JS, ES6
    - Callbacks, Promises, Async-Await

Node JS
    - Environment to run JS outside Browser
    - Built on Chrome's V8 JS Engine
    - Big Community
    - Full-Stack

    - No DOM
    - No Window
    - Server Side Apps
    - Filesystem
    - Versions
    - CommonJS

    -REPL - read eval print loop
    -CLI - running app code in Node


Globals -> No window!
    - __dirname     - path to current directory
    - __filename    - file name
    - require       - funciton to use modules (CommonJS)
    - module        - info about current module (file)
    - process       - info about env where the progam is being executed

Built-in modules
    - OS 
    - PATH 
    - FS 
    - HTTP 

NPM
    - npm install -> install every dependencies based on package.json
        - usefull when deleting a module (nuke method -> delete node_module and package-lock.json)
    - '-D' -> devDependencies, modules we only use when creating the app
    
;;

Event loop
    - allows nodejs to perform non-blocking IO operations, by offloading operations to the system kernel whenever possible (modern kernels are multi-threaded)
    - setTimeout(()=>{}, timeInterval)
        - even if timeInterval = 0, it still runs the next task first
    
    - User requests -> event loop register the callback -> only when the app is complete it executes the callback

Async patterns
    - Promises
    - async() and await 

Event emitter
    - Event-Driven Programming
    - Used Heavily in Node.js

Streams
    - Writeable
    - Readable
    - Duplex 
    - Transform 
    - Extends EventEmitter class
    - Useful when reading large Filesystem

 HTTP Messages
         -> Request ->
    User      DATA      Node/Express
         <- Response <-

Request Message (User)
    GET(method) /contact(url) HTTP/1.1
    Headers
    Body(optional)

Resonse Message (Server)
    HTTP/1.1 200(status code) OK(status text)
    Headers
    Body(optional)

HTTP Methods
    -   GET:    Read Data 
    -   POST:   Insert Data
    -   PUT:    Update Data
    -   DELETE: Delete Data














